package  {	import fl.controls.Button;	import fl.controls.TextArea;	import fl.controls.TextInput;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.system.IME;	import flash.text.TextField;	import flash.utils.setInterval;		import messageMgr.MessageMgr;	import messageMgr.responses.DialogMsgResponse;		import net.NetEngine;		import protocol.XY_ID;	import protocol.dialogMsg;	import protocol.loginServer;	import protocol.heartCmd;	import flash.events.SecurityErrorEvent;	import flash.utils.ByteArray;		public class ChatClient extends Sprite	{		//flide		//ip		public var txtIp:TextField;				//port		public var txtPort:TextField;				//userName		public var txtUserName:TextField;				//content		public var txtContent:TextArea;				//message		public var txtSendMsg:TextInput;				//连接按钮		public var btnConn:Button;				//登录按钮		public var btnLogin:Button;				//发送按钮		public var btnSendMsg:Button;				//		private var socketEngine:NetEngine;				//		private const HEART_TIME:uint = 5000;				//		private var msgList:Vector.<String>;				private var intervalHeartID:int = 0;				//heart packet		private var heartBuff:heartCmd;				public function ChatClient() 		{			IME.enabled = true;			SharedObject.mainUI = this;						msgList = new Vector.<String>();						var byteArray:ByteArray = new ByteArray();			var dmsg:dialogMsg = new dialogMsg();			dmsg.dialogStr = "测试中文";			dmsg.writeTo(byteArray);						trace(byteArray,byteArray.length);						var dsmg2:dialogMsg = new dialogMsg();			dsmg2.mergeFrom(byteArray);						//trace(dsmg2.dialogStr,dsmg2.xYID);						initNet();			listener();					}				private function initNet():void		{			MessageMgr.registerRespond(XY_ID.XYID_DIALOG,dialogMsg,DialogMsgResponse);						socketEngine = new NetEngine();			socketEngine.addEventListener(Event.CONNECT,connectionHandler,false,0,true);			socketEngine.addEventListener(SecurityErrorEvent.SECURITY_ERROR,securityErrorHandler,false,0,true);			socketEngine.addEventListener(IOErrorEvent.IO_ERROR,connIoErrorHandler,false,0,true);		}				private function securityErrorHandler(event:SecurityErrorEvent):void		{			txtContent.text += "securityError\n";		}				private function listener():void		{			btnConn.addEventListener(MouseEvent.CLICK,connClickHandler,false,0,true);			btnSendMsg.addEventListener(MouseEvent.CLICK,sendClickHandler,false,0,true);			btnLogin.addEventListener(MouseEvent.CLICK,loginClickHandler,false,0,true);		}				private function connectionHandler(event:Event):void		{			txtContent.text += "connectionSucceed\n";			//hearHandler();		}				private function connIoErrorHandler(event:IOErrorEvent):void		{			txtContent.text += "connectionFault\n";		}				private function connClickHandler(event:MouseEvent):void		{			socketEngine.connect(txtIp.text,int(txtPort.text));		}				//登录聊天		private function loginClickHandler(event:MouseEvent):void		{			var login:loginServer = new loginServer();			login.userID = txtUserName.text.toString();			socketEngine.sendMessage(login);		}				private function sendClickHandler(event:MouseEvent):void		{			var theMsg:String = txtSendMsg.text.toString();			if(theMsg.length != 0)			{				var msgDialog:dialogMsg = new dialogMsg();				msgDialog.dialogStr = theMsg;								socketEngine.sendMessage(msgDialog);								appendMsgByStruct("send: " + theMsg);				clearSendContent();			}		}				//		public function appendMsgByStruct(msg:String):void		{			if(msgList)			{				msgList.push(msg);			}			var msgStr = msgList.join("\n");			txtContent.text = msgStr.toString();		}				private function hearHandler():void		{			if(intervalHeartID == 0)			{				intervalHeartID = setInterval(hearHandler,HEART_TIME);			}						heartBuff = new heartCmd();			socketEngine.sendMessage(heartBuff);		}				//clear input content		private function clearSendContent():void		{			txtSendMsg.text = "";		}	}	}